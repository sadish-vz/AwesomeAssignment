-- Sequence: public."customer_ID_seq"

-- DROP SEQUENCE public."customer_ID_seq";

CREATE SEQUENCE public."customer_ID_seq"
  INCREMENT 1
  MINVALUE 1
  MAXVALUE 9223372036854775807
  START 27
  CACHE 1;
ALTER TABLE public."customer_ID_seq"
  OWNER TO postgres;

-- Sequence: public."customeraccount_ID_seq"

-- DROP SEQUENCE public."customeraccount_ID_seq";

CREATE SEQUENCE public."customeraccount_ID_seq"
  INCREMENT 1
  MINVALUE 1
  MAXVALUE 9223372036854775807
  START 16
  CACHE 1;
ALTER TABLE public."customeraccount_ID_seq"
  OWNER TO postgres;


-- Sequence: public."orderdetails_ID_seq"

-- DROP SEQUENCE public."orderdetails_ID_seq";

CREATE SEQUENCE public."orderdetails_ID_seq"
  INCREMENT 1
  MINVALUE 1
  MAXVALUE 9223372036854775807
  START 21
  CACHE 1;
ALTER TABLE public."orderdetails_ID_seq"
  OWNER TO postgres;


-- Sequence: public."product_ID_seq"

-- DROP SEQUENCE public."product_ID_seq";

CREATE SEQUENCE public."product_ID_seq"
  INCREMENT 1
  MINVALUE 1
  MAXVALUE 9223372036854775807
  START 25
  CACHE 1;
ALTER TABLE public."product_ID_seq"
  OWNER TO postgres;

-- Table: public.customer

-- DROP TABLE public.customer;

CREATE TABLE public.customer
(
  custname text NOT NULL,
  email text NOT NULL,
  phoneno character(10) NOT NULL,
  phoneprefix character(5) NOT NULL,
  isactive bit(1) DEFAULT B'1'::bit(1),
  createddate timestamp without time zone NOT NULL DEFAULT now(),
  id integer NOT NULL DEFAULT nextval('"customer_ID_seq"'::regclass),
  createdby integer NOT NULL DEFAULT 1,
  updatedby integer,
  updateddate timestamp without time zone,
  CONSTRAINT "PKCustomer" PRIMARY KEY (id),
  CONSTRAINT "UniqueEmail" UNIQUE (email)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE public.customer
  OWNER TO postgres;


-- Table: public.customeraccount

-- DROP TABLE public.customeraccount;

CREATE TABLE public.customeraccount
(
  pwd character(8) NOT NULL,
  updateddate timestamp without time zone,
  customerid integer NOT NULL,
  createdby integer NOT NULL DEFAULT 1,
  createddate timestamp without time zone DEFAULT now(),
  id integer NOT NULL DEFAULT nextval('"customeraccount_ID_seq"'::regclass),
  CONSTRAINT "PKAccount" PRIMARY KEY (id),
  CONSTRAINT "FKCustomerAcc" FOREIGN KEY (customerid)
      REFERENCES public.customer (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE public.customeraccount
  OWNER TO postgres;


-- Table: public.orderdetails

-- DROP TABLE public.orderdetails;

CREATE TABLE public.orderdetails
(
  customerid integer NOT NULL,
  productid integer NOT NULL,
  tokenno character(15) NOT NULL,
  createddate timestamp without time zone NOT NULL DEFAULT now(),
  createdby integer NOT NULL DEFAULT 1,
  updateddate timestamp without time zone,
  updatedby integer,
  id integer NOT NULL DEFAULT nextval('"orderdetails_ID_seq"'::regclass),
  CONSTRAINT "PKOrderDetails" PRIMARY KEY (id),
  CONSTRAINT "FKCustomer" FOREIGN KEY (customerid)
      REFERENCES public.customer (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT "FKProduct" FOREIGN KEY (productid)
      REFERENCES public.product (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT orderdetails_customerid_key UNIQUE (customerid),
  CONSTRAINT orderdetails_tokenno_key UNIQUE (tokenno)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE public.orderdetails
  OWNER TO postgres;


-- Table: public.product

-- DROP TABLE public.product;

CREATE TABLE public.product
(
  name text,
  description text,
  productlink text,
  createddate timestamp without time zone NOT NULL DEFAULT now(),
  createdby integer NOT NULL DEFAULT 1,
  updateddate timestamp without time zone,
  updatedby integer,
  id integer NOT NULL DEFAULT nextval('"product_ID_seq"'::regclass),
  image character varying(50),
  reviews character varying(1000),
  CONSTRAINT "PKProduct" PRIMARY KEY (id)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE public.product
  OWNER TO postgres;


-- Table: public.sessions

-- DROP TABLE public.sessions;

CREATE TABLE public.sessions
(
  id character varying(32) NOT NULL,
  access integer,
  data text,
  CONSTRAINT sessions_pkey PRIMARY KEY (id)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE public.sessions
  OWNER TO postgres;


-------------------------------------------------------------------------------------------

-- Function: public.checkorder(integer)

-- DROP FUNCTION public.checkorder(integer);

CREATE OR REPLACE FUNCTION public.checkorder(IN customerid1 integer)
  RETURNS TABLE(customerid integer, customername text, customeremail text, customerphoneno character, customerphonenoprefix character, productid integer, productname text, productdescription text, productlink text, image character varying, orderid integer, tokenno character, registerdate timestamp without time zone, reviews character varying) AS
$BODY$
declare count int;
declare id1 int;
declare tokenno1 character(15);
declare regdate timestamp without time zone;
begin
select 0 into id1;
select 'blank' into tokenno1;
select  now() into regdate;
select count(*) into count from orderdetails where orderdetails.customerid=customerid1;
if (count=1) then
	return query execute 'select 
		b.id as customerid,b.custname,b.email,b.phoneno,b.phoneprefix, 
		c.id as productid,c.name as productname,
		c.description as productdescription,c.productlink,c.image,a.id as orderid,a.tokenno,a.createddate as registerdate,reviews
	from 
		orderdetails a inner join customer b on a.customerid=b.id inner join 
		product c on a.productid=c.id
	where 
		a.customerid='||customerid1||' order by c.id';
else
	return query execute 'select 
		b.id as customerid,b.custname,b.email,b.phoneno,b.phoneprefix, 
		 c.id as productid,c.name as productname,
		c.description as productdescription,c.productlink,c.image,cast (null as integer) as id1,cast(null as character(15)) as tokenno1,
		cast(null as timestamp without time zone) as regdate,reviews
	from 
		customer b ,product c
	where 
		b.id='||customerid1||' order by c.id';
end if;
end;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION public.checkorder(integer)
  OWNER TO postgres;


-- Function: public.checktoken(integer)

-- DROP FUNCTION public.checktoken(integer);

CREATE OR REPLACE FUNCTION public.checktoken(IN customerid1 integer)
  RETURNS TABLE(tokenno character, createddate timestamp without time zone) AS
$BODY$
declare passed integer;
begin
		

select count(*)  into passed from orderdetails where customerid=customerid1;

	if (passed >0) then
		return query execute 'select tokenno,createddate from orderdetails where customerid='||customerid1;
	
	else
		return query execute 'select cast(null as character(15)) ,cast(null as timestamp without time zone) ';
	end if;
end;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION public.checktoken(integer)
  OWNER TO postgres;


-- Function: public.neworder(integer, integer)

-- DROP FUNCTION public.neworder(integer, integer);

CREATE OR REPLACE FUNCTION public.neworder(
    IN customerid1 integer,
    IN productid1 integer)
  RETURNS TABLE(customerid integer, customername text, customeremail text, customerphoneno character, customerphonenoprefix character, productid integer, productname text, productdescription text, productlink text, image character varying, orderid integer, tokenno character, registerdate timestamp without time zone, reviews character varying) AS
$BODY$
begin

	INSERT INTO orderdetails("customerid", "productid",tokenno)
	select customerid1,productid1,token(15);
	return query execute 'select * from checkorder('||customerid1||')';

end;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION public.neworder(integer, integer)
  OWNER TO postgres;



-- Function: public.newuser(text, text, character, character, character)

-- DROP FUNCTION public.newuser(text, text, character, character, character);

CREATE OR REPLACE FUNCTION public.newuser(
    username text,
    email text,
    phoneno character,
    phoneprefix character,
    passwrd character)
  RETURNS boolean AS
$BODY$
declare passed integer;
begin
		INSERT INTO customer("custname", "email", "phoneno", "phoneprefix")
    VALUES (username,email,phoneno,phoneprefix);

INSERT INTO customeraccount(
            "pwd", "customerid")
    select passwrd,"id" from customer where customer.email=$2;

select count(*)  into passed from customer where customer.email=$2;

	if (passed >0) then
	return true;
	else
	return false;
	end if;
end;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.newuser(text, text, character, character, character)
  OWNER TO postgres;


-- Function: public.token(integer)

-- DROP FUNCTION public.token(integer);

CREATE OR REPLACE FUNCTION public.token(length integer)
  RETURNS text AS
$BODY$
declare
  chars text[] := '{0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}';
  result text := '';
  i integer := 0;
begin
  if length < 0 then
    raise exception 'Given length cannot be less than 0';
  end if;
  for i in 1..length loop
    result := result || chars[1+random()*(array_length(chars, 1)-1)];
  end loop;
  return result;
end;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.token(integer)
  OWNER TO postgres;


--------------------------------------------------------------------------------------------------


INSERT INTO public.product(
            name, description, productlink, createddate, createdby, updateddate, 
            updatedby, id, image, reviews)
    VALUES ('iPhone 7 - 16 GB', 'iPhone 7 is the latest iPhone from Apple', 'HTTP://WWW.APPLE.COM/SHOP/BUY-IPHONE/IPHONE6', now(), 1, now(), 
            1, 22, 'images/iPhone7.1.3.jpg','<p>
                                    <span class="glyphicon glyphicon-star"></span>
                                    <span class="glyphicon glyphicon-star"></span>
                                    <span class="glyphicon glyphicon-star"></span>
                                    <span class="glyphicon glyphicon-star"></span>
                                    <span class="glyphicon glyphicon-star-empty"></span>
                                </p>' );

INSERT INTO public.product(
            name, description, productlink, createddate, createdby, updateddate, 
            updatedby, id, image, reviews)
    VALUES ('iPhone 7s - 16 GB', 'iPhone 7s is the latest iPhone from Apple', 'HTTP://WWW.APPLE.COM/SHOP/BUY-IPHONE/IPHONE6s', now(), 1, now(), 
            1, 23, 'images/iPhone7.1.4.jpg', ' <p>
                                    <span class="glyphicon glyphicon-star"></span>
                                    <span class="glyphicon glyphicon-star"></span>
                                    <span class="glyphicon glyphicon-star"></span>
                                    <span class="glyphicon glyphicon-star"></span>
                                    <span class="glyphicon glyphicon-star-empty"></span>
                                </p>');

INSERT INTO public.product(
            name, description, productlink, createddate, createdby, updateddate, 
            updatedby, id, image, reviews)
    VALUES ('iPhone 7 - 32 GB', 'iPhone 7 is the latest iPhone from Apple', 'HTTP://WWW.APPLE.COM/SHOP/BUY-IPHONE/IPHONE6', now(), 1, now(), 
            1, 24, 'images/iPhone7.1.1.jpg', '<p class="pull-right">6 reviews</p>
                                <p>
                                    <span class="glyphicon glyphicon-star"></span>
                                    <span class="glyphicon glyphicon-star"></span>
                                    <span class="glyphicon glyphicon-star"></span>
                                    <span class="glyphicon glyphicon-star-empty"></span>
                                    <span class="glyphicon glyphicon-star-empty"></span>
                                </p>');

INSERT INTO public.product(
            name, description, productlink, createddate, createdby, updateddate, 
            updatedby, id, image, reviews)
    VALUES ('iPhone 7s - 32 GB', 'iPhone 7s is the latest iPhone from Apple', 'HTTP://WWW.APPLE.COM/SHOP/BUY-IPHONE/IPHONE6s', now(), 1, now(), 
            1, 25, 'images/iPhone7.1.1.jpg', '<p class="pull-right">18 reviews</p>
                                <p>
                                    <span class="glyphicon glyphicon-star"></span>
                                    <span class="glyphicon glyphicon-star"></span>
                                    <span class="glyphicon glyphicon-star"></span>
                                    <span class="glyphicon glyphicon-star"></span>
                                    <span class="glyphicon glyphicon-star-empty"></span>
                                </p>');

